<?xml version="1.0" encoding="UTF-8" ?>
<!-- XML : 마크업을 이용한 데이터 저장/전달/교환 프로그래밍 언어 -->

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- XML 파일 내 myBatis 라이브러리 설정 -->

<!-- XML과 매핑할 인터페이스 설정, src 이하 경로 지정 -->
<mapper namespace="example.d13.XmlMapper">
    <!-- 등록 (id = 추상 메소드명, parameterType = 매개변수 타입 경로) -> 생성된 pk 값을 sno 필드에 반환 -->
    <insert id="save" parameterType="example.d13.StudentDto" useGeneratedKeys="true" keyProperty="sno">
        INSERT INTO student(name, kor, math) VALUES(#{name}, #{kor}, #{math})
    </insert>
    <!-- 전체 조회 (resultType = 반환 타입 경로) -->
    <select id="findAll" resultType="example.d13.StudentDto">
        SELECT * FROM student
    </select>
    <!-- 개별 조회 -->
    <select id="find" parameterType="int" resultType="example.d13.StudentDto">
        SELECT * FROM student WHERE sno = #{sno}
    </select>
    <!-- 개별 삭제 -->
    <delete id="delete" parameterType="int">
        DELETE FROM student WHERE sno = #{sno}
    </delete>
    <!-- 개별 수정 -->
    <update id="update" parameterType="example.d13.StudentDto">
        UPDATE student SET kor = #{kor}, math = #{math} where sno = #{sno}
    </update>
    <!-- if 동적 쿼리 -->
    <select id="query2" parameterType="int" resultType="example.d13.StudentDto">
        select * from student where 1=1
        <if test="kor != null">
            and kor >= #{kor}
        </if>
    </select>
    <!-- if 동적 쿼리 2 -->
    <!-- concat(문자열, 문자열) : 문자열 연결 함수 -> name like %#{name}% -->
    <select id="query3" resultType="example.d13.StudentDto">
        select * from student
        <where>
            <if test="name != null">
                and name like concat('%',#{name},'%')
            </if>
            <if test="math != 0">
                and math >= #{math}
            </if>
        </where>
    </select>
    <!-- foreach 동적 쿼리 -->
    <!-- collection : 컬렉션 타입(list), item : 반복 변수명, separator : 구분 문자 -->
    <insert id="saveAll" parameterType="list" useGeneratedKeys="true" keyProperty="sno">
        insert into student(name, kor, math) values
        <foreach collection="list" item="student" separator=",">
            (#{student.name}, #{student.kor}, #{student.math})
        </foreach>
    </insert>
</mapper>